// Code generated by Kitex v0.4.4. DO NOT EDIT.

package relationservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	relation "tiktok-gateway/kitex_gen/relation"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*relation.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"DouyinRelationActionMethod":       kitex.NewMethodInfo(douyinRelationActionMethodHandler, newRelationServiceDouyinRelationActionMethodArgs, newRelationServiceDouyinRelationActionMethodResult, false),
		"DouyinRelationFollowListMethod":   kitex.NewMethodInfo(douyinRelationFollowListMethodHandler, newRelationServiceDouyinRelationFollowListMethodArgs, newRelationServiceDouyinRelationFollowListMethodResult, false),
		"DouyinRelationFollowerListMethod": kitex.NewMethodInfo(douyinRelationFollowerListMethodHandler, newRelationServiceDouyinRelationFollowerListMethodArgs, newRelationServiceDouyinRelationFollowerListMethodResult, false),
		"DouyinRelationFriendListMethod":   kitex.NewMethodInfo(douyinRelationFriendListMethodHandler, newRelationServiceDouyinRelationFriendListMethodArgs, newRelationServiceDouyinRelationFriendListMethodResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "relation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func douyinRelationActionMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceDouyinRelationActionMethodArgs)
	realResult := result.(*relation.RelationServiceDouyinRelationActionMethodResult)
	success, err := handler.(relation.RelationService).DouyinRelationActionMethod(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceDouyinRelationActionMethodArgs() interface{} {
	return relation.NewRelationServiceDouyinRelationActionMethodArgs()
}

func newRelationServiceDouyinRelationActionMethodResult() interface{} {
	return relation.NewRelationServiceDouyinRelationActionMethodResult()
}

func douyinRelationFollowListMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceDouyinRelationFollowListMethodArgs)
	realResult := result.(*relation.RelationServiceDouyinRelationFollowListMethodResult)
	success, err := handler.(relation.RelationService).DouyinRelationFollowListMethod(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceDouyinRelationFollowListMethodArgs() interface{} {
	return relation.NewRelationServiceDouyinRelationFollowListMethodArgs()
}

func newRelationServiceDouyinRelationFollowListMethodResult() interface{} {
	return relation.NewRelationServiceDouyinRelationFollowListMethodResult()
}

func douyinRelationFollowerListMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceDouyinRelationFollowerListMethodArgs)
	realResult := result.(*relation.RelationServiceDouyinRelationFollowerListMethodResult)
	success, err := handler.(relation.RelationService).DouyinRelationFollowerListMethod(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceDouyinRelationFollowerListMethodArgs() interface{} {
	return relation.NewRelationServiceDouyinRelationFollowerListMethodArgs()
}

func newRelationServiceDouyinRelationFollowerListMethodResult() interface{} {
	return relation.NewRelationServiceDouyinRelationFollowerListMethodResult()
}

func douyinRelationFriendListMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceDouyinRelationFriendListMethodArgs)
	realResult := result.(*relation.RelationServiceDouyinRelationFriendListMethodResult)
	success, err := handler.(relation.RelationService).DouyinRelationFriendListMethod(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceDouyinRelationFriendListMethodArgs() interface{} {
	return relation.NewRelationServiceDouyinRelationFriendListMethodArgs()
}

func newRelationServiceDouyinRelationFriendListMethodResult() interface{} {
	return relation.NewRelationServiceDouyinRelationFriendListMethodResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) DouyinRelationActionMethod(ctx context.Context, req *relation.DouyinRelationActionRequest) (r *relation.DouyinRelationActionResponse, err error) {
	var _args relation.RelationServiceDouyinRelationActionMethodArgs
	_args.Req = req
	var _result relation.RelationServiceDouyinRelationActionMethodResult
	if err = p.c.Call(ctx, "DouyinRelationActionMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DouyinRelationFollowListMethod(ctx context.Context, req *relation.DouyinRelationFollowListRequest) (r *relation.DouyinRelationFollowListResponse, err error) {
	var _args relation.RelationServiceDouyinRelationFollowListMethodArgs
	_args.Req = req
	var _result relation.RelationServiceDouyinRelationFollowListMethodResult
	if err = p.c.Call(ctx, "DouyinRelationFollowListMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DouyinRelationFollowerListMethod(ctx context.Context, req *relation.DouyinRelationFollowerListRequest) (r *relation.DouyinRelationFollowerListResponse, err error) {
	var _args relation.RelationServiceDouyinRelationFollowerListMethodArgs
	_args.Req = req
	var _result relation.RelationServiceDouyinRelationFollowerListMethodResult
	if err = p.c.Call(ctx, "DouyinRelationFollowerListMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DouyinRelationFriendListMethod(ctx context.Context, req *relation.DouyinRelationFriendListRequest) (r *relation.DouyinRelationFriendListResponse, err error) {
	var _args relation.RelationServiceDouyinRelationFriendListMethodArgs
	_args.Req = req
	var _result relation.RelationServiceDouyinRelationFriendListMethodResult
	if err = p.c.Call(ctx, "DouyinRelationFriendListMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
