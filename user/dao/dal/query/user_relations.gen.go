// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/41197-yhkt/tiktok-user/dao/dal/model"
)

func newUserRelation(db *gorm.DB, opts ...gen.DOOption) userRelation {
	_userRelation := userRelation{}

	_userRelation.userRelationDo.UseDB(db, opts...)
	_userRelation.userRelationDo.UseModel(&model.UserRelation{})

	tableName := _userRelation.userRelationDo.TableName()
	_userRelation.ALL = field.NewAsterisk(tableName)
	_userRelation.ID = field.NewUint(tableName, "id")
	_userRelation.CreatedAt = field.NewTime(tableName, "created_at")
	_userRelation.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userRelation.DeletedAt = field.NewField(tableName, "deleted_at")
	_userRelation.FollowFrom = field.NewUint(tableName, "follow_from")
	_userRelation.FollowTo = field.NewUint(tableName, "follow_to")

	_userRelation.fillFieldMap()

	return _userRelation
}

type userRelation struct {
	userRelationDo userRelationDo

	ALL        field.Asterisk
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	FollowFrom field.Uint
	FollowTo   field.Uint

	fieldMap map[string]field.Expr
}

func (u userRelation) Table(newTableName string) *userRelation {
	u.userRelationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRelation) As(alias string) *userRelation {
	u.userRelationDo.DO = *(u.userRelationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRelation) updateTableName(table string) *userRelation {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.FollowFrom = field.NewUint(table, "follow_from")
	u.FollowTo = field.NewUint(table, "follow_to")

	u.fillFieldMap()

	return u
}

func (u *userRelation) WithContext(ctx context.Context) *userRelationDo {
	return u.userRelationDo.WithContext(ctx)
}

func (u userRelation) TableName() string { return u.userRelationDo.TableName() }

func (u userRelation) Alias() string { return u.userRelationDo.Alias() }

func (u *userRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRelation) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["follow_from"] = u.FollowFrom
	u.fieldMap["follow_to"] = u.FollowTo
}

func (u userRelation) clone(db *gorm.DB) userRelation {
	u.userRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRelation) replaceDB(db *gorm.DB) userRelation {
	u.userRelationDo.ReplaceDB(db)
	return u
}

type userRelationDo struct{ gen.DO }

// where("id=@id")
func (u userRelationDo) FindByID(id uint) (result model.UserRelation, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("id=? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Where(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// where("follow_from=@follow_from")
func (u userRelationDo) FindByFollowFrom(follow_from uint) (result []model.UserRelation, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, follow_from)
	generateSQL.WriteString("follow_from=? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Where(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// where("follow_to=@follow_to")
func (u userRelationDo) FindByFollowTo(follow_to uint) (result []model.UserRelation, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, follow_to)
	generateSQL.WriteString("follow_to=? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Where(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// where("follow_from=@follow_from and follow_to=@follow_to")
func (u userRelationDo) FindByFollowFromAndFollowTo(follow_from uint, follow_to uint) (result model.UserRelation, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, follow_from)
	params = append(params, follow_to)
	generateSQL.WriteString("follow_from=? and follow_to=? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Where(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (u userRelationDo) Debug() *userRelationDo {
	return u.withDO(u.DO.Debug())
}

func (u userRelationDo) WithContext(ctx context.Context) *userRelationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRelationDo) ReadDB() *userRelationDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRelationDo) WriteDB() *userRelationDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRelationDo) Session(config *gorm.Session) *userRelationDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRelationDo) Clauses(conds ...clause.Expression) *userRelationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRelationDo) Returning(value interface{}, columns ...string) *userRelationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRelationDo) Not(conds ...gen.Condition) *userRelationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRelationDo) Or(conds ...gen.Condition) *userRelationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRelationDo) Select(conds ...field.Expr) *userRelationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRelationDo) Where(conds ...gen.Condition) *userRelationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *userRelationDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userRelationDo) Order(conds ...field.Expr) *userRelationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRelationDo) Distinct(cols ...field.Expr) *userRelationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRelationDo) Omit(cols ...field.Expr) *userRelationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRelationDo) Join(table schema.Tabler, on ...field.Expr) *userRelationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userRelationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) *userRelationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRelationDo) Group(cols ...field.Expr) *userRelationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRelationDo) Having(conds ...gen.Condition) *userRelationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRelationDo) Limit(limit int) *userRelationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRelationDo) Offset(offset int) *userRelationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userRelationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRelationDo) Unscoped() *userRelationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRelationDo) Create(values ...*model.UserRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRelationDo) CreateInBatches(values []*model.UserRelation, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRelationDo) Save(values ...*model.UserRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRelationDo) First() (*model.UserRelation, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRelation), nil
	}
}

func (u userRelationDo) Take() (*model.UserRelation, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRelation), nil
	}
}

func (u userRelationDo) Last() (*model.UserRelation, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRelation), nil
	}
}

func (u userRelationDo) Find() ([]*model.UserRelation, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRelation), err
}

func (u userRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRelation, err error) {
	buf := make([]*model.UserRelation, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRelationDo) FindInBatches(result *[]*model.UserRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRelationDo) Attrs(attrs ...field.AssignExpr) *userRelationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRelationDo) Assign(attrs ...field.AssignExpr) *userRelationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRelationDo) Joins(fields ...field.RelationField) *userRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRelationDo) Preload(fields ...field.RelationField) *userRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRelationDo) FirstOrInit() (*model.UserRelation, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRelation), nil
	}
}

func (u userRelationDo) FirstOrCreate() (*model.UserRelation, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRelation), nil
	}
}

func (u userRelationDo) FindByPage(offset int, limit int) (result []*model.UserRelation, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRelationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRelationDo) Delete(models ...*model.UserRelation) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRelationDo) withDO(do gen.Dao) *userRelationDo {
	u.DO = *do.(*gen.DO)
	return u
}
